#+TITLE: BowChain [SUNRISE 2021 Branch]
#+AUTHOR: Dylan Winters

[[file:banner.png]]

* SUNRISE 2021 Notes
** Links to Files (access to shared Google Drive required)

|-----------------------+-------+---------+-------+--------------|
| Format                | Aries | Pelican | Polly | Walton Smith |
|-----------------------+-------+---------+-------+--------------|
| Raw Data (.rsk)       | [[https://drive.google.com/drive/folders/1T8OOWNxaBcAnjby5LED0wHfiGiaP4IB8?usp=sharing][Link]]  | [[https://drive.google.com/drive/folders/1FZw4GSGXDE3jZt5EK3esQksPPxXyWuo3?usp=sharing][Link]]    | [[https://drive.google.com/drive/folders/1SpyaHECoPTCD1tkVMyeFq8EDyUNtwrag?usp=sharing][Link]]  | [[https://drive.google.com/drive/folders/1SNvqGYEspDUJOPIE07eqHj7Pelk_2A3v?usp=sharing][Link]]         |
| Raw Data (.mat)       | [[https://drive.google.com/drive/folders/1672JXZlFSxFF6LTwrC9rnHw4K8XSigxd?usp=sharing][Link]]  | [[https://drive.google.com/drive/folders/1FZw4GSGXDE3jZt5EK3esQksPPxXyWuo3?usp=sharing][Link]]    | [[https://drive.google.com/drive/folders/162U_QZyp7c_gbhqoBFHxfgg3U2C9EQ0N?usp=sharing][Link]]  | [[https://drive.google.com/drive/folders/1TDgVUwYWTyzat0Ylpn-HJxg8zAj5d34a?usp=sharing][Link]]         |
| Deployment .mat files | [[https://drive.google.com/drive/folders/1g37D9Cuv5h8wv4jpGIexu3_JLK6ikijD?usp=sharing][Link]]  | [[https://drive.google.com/drive/folders/18L3IIR9l-H_vT6NpFwObz90p-dGyX_yJ?usp=sharing][Link]]    | [[https://drive.google.com/drive/folders/1g37D9Cuv5h8wv4jpGIexu3_JLK6ikijD?usp=sharing][Link]]  | [[https://drive.google.com/drive/folders/1g37D9Cuv5h8wv4jpGIexu3_JLK6ikijD?usp=sharing][Link]]         |
| Section .mat files    | [[https://drive.google.com/drive/folders/1TCm5d2ihl97T3w-1K_nm-5oUL0QYTcNG?usp=sharing][Link]]  | TODO    | [[https://drive.google.com/drive/folders/1TCm5d2ihl97T3w-1K_nm-5oUL0QYTcNG?usp=sharing][Link]]  | [[https://drive.google.com/drive/folders/1TCm5d2ihl97T3w-1K_nm-5oUL0QYTcNG?usp=sharing][Link]]         |
|-----------------------+-------+---------+-------+--------------|

*** Descriptions
- *Raw data (.rsk)*: Post-deployment data straight from sensors.
- *Raw data (.mat)*: Unmodified raw data, converted to .mat format with a consistent structure.

  |------------+---------------+------------------------|
  | Field Name | Description   | Units                  |
  |------------+---------------+------------------------|
  | c          | conductivity  | S/m                    |
  | dn         | datenum       | days from Jan 1 year 1 |
  | p          | pressure      | dBar                   |
  | s          | salinity      | PSU                    |
  | sn         | serial number | --                     |
  | t          | temperature   | C                      |

- *Deployment .mat files*: Full-deployment (i.e. chain in water) files with all sensors re-sampled to a regular time grid.

  - Pressure offsets have been removed.
  - Severe clock offsets have been corrected, but clocks have not been corrected for drift.
  - Temperatures have not been calibrated.
  - Depths were computed by interpolating pressure to along-chain position.

  |------------+------+-----------------------------+---------------|
  | Field Name | Size | Description                 | Units         |
  |------------+------+-----------------------------+---------------|
  | dn         | 1xT  | datenum                     | days          |
  | info       | --   | processing settings         | --            |
  | lat        | 1xT  | latitude                    | deg N         |
  | lon        | 1xT  | longitude                   | deg E         |
  | p          | NxT  | pressure, NaN if not logged | dBar          |
  | pos        | Nx1  | along-chain position        | m             |
  | s          | NxT  | salinity, NaN if not logged | PSU           |
  | t          | NxT  | temperature                 | C             |
  | z          | NxT  | depth coordinate            | m (0=surface) |
  |------------+------+-----------------------------+---------------|
  #+CAPTION: N=number of sensors; T=number of samples.

- *Section .mat files*: Same as above, but separated into individual sections.

** Outstanding Issues

See [[file:Code/Cruise_SUNRISE/README.org][SUNRISE Tchain Processing Notes]] for additional notes on manually applied corrections.

*** TODO Integrate Pelican processing code into this repository
*** TODO Timestamp corrections
- [X] Sensors with severe clock issues (e.g. wrong timezone, clock at year 0) have been corrected in the processed data.
- [ ] Clocks have not been corrected for drift during the cruise. Once this is done, data can be easily re-processed.
  - [ ] Need to identify time of initial UTC sync and compute drift for every sensor (using screenshots in raw data folders)

*** TODO Temperature calibrations
- No modifications have been made to measured temperatures except in some extreme cases where bad data was masked with NaNs.



* Overview
Process a all bow chain deployments from a cruise with
=BowChain_master(cruiseName)=. Process a specific vessel or deployment with
=BowChain_master(cruiseName,vesselName,deploymentName)=.

~BowChain_master.m~ is structured as follows:

** Cruise and deployment configuration

The cruise's configuration function is called using [[file:Code/get_config.m][get_config.m]]. This fills
the cruise's config structure with global default options from
[[file:Code/config_default.m][config_default.m]] and checks deployments for missing options.

** Deployment processing
   
Each deployment is processed sequentially with the following steps:

1) Sensor setup ([[file:Code/preproc_setup.m][preproc_setup.m]])
   - The user-defined sensor serial numbers are passed into
     [[file:Code/get_sensor_info.m][get_sensor_info.m]]. This function acts as a database containing
     processing instructions for different sensor types.
   - If the instrument type is known and an associated raw datafile is found,
     the sensor gets an entry in ~config.sensors~ containing parsing
     instructions and an output .mat file name.

2) File conversion ([[file:Code/preproc_raw2mat.m][preproc_raw2mat.m]])

   - Using the information gathered in [[file:Code/preproc_setup.m][preproc_setup.m]], each sensor's raw
     datafiles are convered to a .mat format. This step is skipped if .mat
     files already exist.

3) Load data

   - Each sensor's .mat file is loaded using [[file:Code/proc_load_mat.m][proc_load_mat.m]]. This creates a
     ~data~ cell array with raw sensor data in each cell.

4) Sample data onto a uniformly-spaced time base using [[file:Code/proc_grid_init.m][proc_grid_init.m]].
   - This initializes the ~grided~ data structure that is passed through the
     next several functions.
   - /If any customizations add additional fields to the ~gridded~ structure,
     they must be initialized in this function./ MATLAB will throw an error if a
     function tries to add fields to a single entry of a non-scalar struct
     array. In other words, ~gridded(i) = some_function(gridded(i))~ will not
     work if ~some_function~ tries to add non-initialized fields to
     ~gridded(i)~.

5) Calibrate sensor clocks and pressure sensors
   - Clocks are calibrated using [[file:Code/proc_time_offsets.m][proc_time_offsets.m]]. The
     ~config.time_offset_method~ and related fields control what this function
     does.
   - Pressure sensors are calibrated with [[file:Code/proc_pressure_cal.m][proc_pressure_cal.m]] if the
     ~config.zero_pressure_interval~ field is defined.
   - Time and pressure offsets are applied to the raw data, and it is once again
     sampled onto a uniformly-spaced time base using [[file:Code/proc_grid_init.m][proc_grid_init.m]].

6) Compute positional offsets with a chain shape model
   - [[file:Code/proc_chain_model.m][proc_chain_model.m]] uses known instrument positions and measured pressure
     data to compute positional offsets for each measurement. This fills the ~x~
     and ~z~ fields of the gridded data structure.

7) Apply positional offsets to GPS data
   - [[file:Code/proc_gps.m][proc_gps.m]] converts positional offsets to arclength on the WGS84
     ellipsoid and adds them to the ship's position in the direction of the
     ship's heading.

* Setup

** BowChain

Clone the git repository:

#+BEGIN_SRC sh
git clone https://github.com/dswinters/BowChain.git
#+END_SRC

Copy the ~user_directories.m.example~ file to ~user_directories.m~:
#+BEGIN_SRC sh
cd BowChain/Code
cp user_directories.m.example user_directories.m
#+END_SRC

** RSKtools

Download RSKtools from [[https://rbr-global.com/support/matlab-tools]] and add it to MATLAB's path (typically somewhere like ~$HOME/Documents/MATLAB~). I do this in ~$HOME/Documents/MATLAB/startup.m~:

#+BEGIN_SRC matlab
addpath(genpath(fullfile(userpath,'RSKtools')));
#+END_SRC


* Configuration

** Deployment configuration

Within the [[file:Code/][Code]] directory, cruise-specific folders contain information needed to
locate and process deployment data. Each cruise needs a ~<cruise>_config~ file
that returns a structure containing configuration information for each
deployment.

See the [[https://github.com/dswinters/BowChain/blob/SUNRISE_2021/Code/Cruise_SUNRISE/config_SUNRISE.m][config_SUNRISE.m]] in the [[https://github.com/dswinters/BowChain/tree/SUNRISE_2021/Code/Cruise_SUNRISE][SUNRISE_2021 branch]] for an example of a cruise
configuration file. This function can utilize whatever organizational structure
exists for a cruise; it just needs to return a ~config~ structure with the
following options for each deployment:

*** Deployment configuration options

Base parameters
| Field                         | Description                                      | Default                 |
|-------------------------------+--------------------------------------------------+-------------------------|
| config.name                   | deployment name                                  |                         |
| config.vessel                 | vessel name                                      |                         |
| config.dir.raw                | raw deployment data directory                    |                         |
| config.sensor_sn              | cell array of sensor serial number strings       |                         |
| config.sensor_pos             | vector of sensor positions                       |                         |
| config.dn_range               | time interval for deployment                     |                         |
| config.freq_base              | frequency of gridded output data                 | 2 Hz                    |
| config.time_offset.method     | method for sensor clock corrections              | 'none'                  |
| config.zero_pressure_interval | time interval for zero-pressure calibration      | no pressure calibration |
| config.chain_model            | model to use for instrument position corrections | 'cm_straight'           |
| config.file_gps               | location of GPS data file                        |                         |

Some configuration options require additional fields in the ~config~ structure:
| Field                     | Value         | Additional Required Field | Description                                 |
|---------------------------+---------------+---------------------------+---------------------------------------------|
| config.time_offset_method | 'cohere'      | config.cohere_interval    | Interval to use for clock calibration       |
| config.time_offset_method | 'known_drift' | config.time_synched       | Time (datenum,UTC) that clocks were synched |
| config.time_offset_method | 'known_drift' | config.drift              | Measured clock drift on recovery            |
 

** Instrument configuration

Each instrument is linked to an instrument type via its serial number, and each
instrument type is linked to a parsing function and a raw data file extension.
This is all done in [[file:Code/get_sensor_info.m][get_sensor_info.m]], which takes a serial number as input.

*Any instruments that I have not encountered will not be included in this list!*
Fortunately, associating serial numbers to instruments can be easily done by
modifying [[file:Code/get_sensor_info.m][get_sensor_info]] to include new serial numbers.

Every sensor parsing function is wrapped in a simple function to rename the
fields in a consistent manner. The following files in the [[file:Code/ParseFunctions/][Code/ParseFunctions/]]
directory are all examples of such "wrapper" functions:

- [[file:Code/ParseFunctions/parse_rbr_concerto.m]]
- [[file:Code/ParseFunctions/parse_rbr_solo.m]]
- [[file:Code/ParseFunctions/parse_sbe39.m]]
- [[file:Code/ParseFunctions/parse_sbe56.m]]

See the latter half of [[file:Code/get_sensor_info.m][get_sensor_info.m]] for associations between instrument
types and parsing functions.
